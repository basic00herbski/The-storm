<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxSpeed = 6;
velX = 0.0;
velY = 0.0;
angle = 0.0;
thrust = false;
reverseThrust = false;
rotateLeft = false;
rotateRight = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check Key's Pressed
if keyboard_check_pressed(ord('W')) {
    thrust = true;
}
if keyboard_check_pressed(ord('S')) {
    reverseThrust = true;
}
if keyboard_check_pressed(ord('A')) {
    rotateLeft = true;
}
if keyboard_check_pressed(ord('D')) {
    rotateRight = true;
}

// Check Key's Released
if keyboard_check_released(ord('W')) {
    thrust = false;
}
if keyboard_check_released(ord('S')) {
    reverseThrust = false;
}
if keyboard_check_released(ord('A')) {
    rotateLeft = false;
}
if keyboard_check_released(ord('D')) {
    rotateRight = false;
}

// Tilt ship left
if (rotateLeft) {
    angle -= 3;
}

// Tilt ship right
if (rotateRight) {
    angle += 3;
}

// If angle goes lower than 0, reset to 360 and vice versa
if (angle &lt; 0) { angle = 360 - (-angle); } 
if (angle &gt; 360) { angle = 0; } 

// Set image angle to Objects angle
image_angle = -angle;

// Get radians from angle
radians = (3.1415926536/180)*(angle);

// If Player thrust, determine direction Player will head towards based on angle
if (thrust) {
    if ((velX &gt; -maxSpeed &amp;&amp; velX &lt; maxSpeed) || (velY &gt; -maxSpeed &amp;&amp; velY &lt; maxSpeed) ) {
        velX += (floor(cos(radians)*10+0.5)/10) * 0.05;
        velY += (floor(sin(radians)*10+0.5)/10) * 0.05;
    }
}

// Reverse thrust
if (reverseThrust) {
    if ((velX &gt; -maxSpeed &amp;&amp; velX &lt; maxSpeed) || (velY &gt; -maxSpeed &amp;&amp; velY &lt; maxSpeed) ) {
        velX -= (floor(cos(radians)*10+0.5)/10) * 0.05;
        velY -= (floor(sin(radians)*10+0.5)/10) * 0.05;
    }
}

// Add speed to Player object
x += velX;
y += velY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
