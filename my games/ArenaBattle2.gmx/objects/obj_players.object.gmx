<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Variables
index = -1;

// Combat
wins = 0;
hearts = 3;
tag = "";
lastHitBy = "";
block = false;
blockTimer = 0;
blockCD = 0;
stunned = false;
stunTimer = 0;

// Gravity
grav = 0.9;
vX = 0.0;
vY = 0.0;
jumps = 1;

// Movement
moveLeft = false;
moveRight = false;
moveUp = false;
moveDown = false;
moving = false;
facing = "right";
shift = false;
playSlash = false;
spawnAttack = false;

jumpstate = "falling";

// Attacks
attack = false;
attackFrame = 0; 
attackTimer = 0;

// Alive
alive = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Players

/* [ Why collision doesnt work sometimes ]
    When you have precise collision and you
    jump or move, the collision box changes,
    because of this, the player can change collision 
    boxes in between frames and and become stuck inside 
    of a collision block upon changing frames.
*/

// Character selection room
if (room == rm_characterSelection) {
    y = -120;
}

// Arena room
else{
    /* Key Pressed */
    // Move Left
    if gamepad_button_check_pressed(index, gp_padl){
        if (!stunned &amp;&amp; !block) {
            moveLeft = true;
        }
    }
    // Move Right
    if gamepad_button_check_pressed(index, gp_padr) {
        if (!stunned &amp;&amp; !block) {
            moveRight = true;
        }
    }
    // Jump
    if gamepad_button_check_pressed(index, gp_face1) {
        if (!attack &amp;&amp; !stunned) {
            if ( jumps &gt; 0 ){
                jumps--;
                y -= 5;
                vY = -20;
                jumpstate = "jump";
            }
        }
    }
    // Attack
    if gamepad_button_check_pressed(index, gp_face3) {
        if (!attack &amp;&amp; !stunned &amp;&amp; !block) {
            playSlash = true;
            clash = false;
            attack = true;
            spawnAttack = true;
        }
    }
    // Block
    if gamepad_button_check_pressed(index, gp_face2) {
        if (!block &amp;&amp; blockCD &lt;= 0 &amp;&amp; !stunned) {
            block = true;
        }
    }
    
    /* Key Released */
    // Move Left
    if gamepad_button_check_released(index, gp_padl) {
        moveLeft = false;
    }
    // Move Right
    if gamepad_button_check_released(index, gp_padr) {
        moveRight = false;
    }
    
    // Player movement
    if (moveLeft) {
        vX -= 0.5;
        if (!shift) {
            facing = "left";
        }
        moving = true;
    }else if (moveRight) {
        vX += 0.5;
        if (!shift) {
            facing = "right";
        }
        moving = true;
    }
    
    // Velocity decay
    if (!moveLeft &amp;&amp; !moveRight) {
        moving = false;
        vX = vX - vX * 0.2;
    }
    
    // Collision, also add velocity to Player
    if !place_meeting(x + vX, y, obj_collide) { 
        x +=vX;
    }
    
    // Max Velocity
    if (vX &lt;= -6) {
        vX = -6;
    }if (vX &gt;= 6) {
        vX = 6;
    }
    
    // Gravity
    vY += grav;
    if (vY &gt; 15) vY = 15;
    
    if (!place_meeting(x, y+vY, obj_collide)) {
        y +=vY;
    }else{
        vY = 0.0;
        jumpstate = "ground";
        jumps = 1;
    }
    
    // Idle animation
    if (!moving) {
        if (facing == "left") {
            if (jumpstate=="jump"){
                sprite_index = spr_player_jump_left;
            }else{
                sprite_index = spr_player_idle_left;
            }
        }
        if (facing == "right") {
            if (jumpstate=="jump"){
                sprite_index = spr_player_jump_right;
            }else{
                sprite_index = spr_player_idle_right;
            }
        }
    // Moving animation
    }else{
        if (facing == "left") {
            if (jumpstate!="jump"){
                sprite_index = spr_player_walk_left;
                image_speed = 0.1;
            }else{
                sprite_index = spr_player_jump_left;
            }
        }
        if (facing == "right") {
            if (jumpstate!="jump"){
                sprite_index = spr_player_walk_right;
                image_speed = 0.1;
            }else{
                sprite_index = spr_player_jump_right;
            }
        }
    }
    
    // Attack animation
    if (attack) {
        // Determine direction
        if (facing == "left") {
           sprite_index = spr_player_attack_left;
        } 
        if (facing == "right") {
           sprite_index = spr_player_attack_right;
        }
        
        // Attack timer
        attackTimer++;
        if (attackTimer &lt; 15) {
            attackFrame = 0;
        }else{
            // Spawn attack collision
            if (spawnAttack) {
                spawnAttack = false;
                // Create reference of Player in object controller
                obj_controller.obj_dummy = self;
                // Determine to place, left or right of Player
                if (facing == "left") {
                    if (tag == "p1") {
                        instance_create(x, y, obj_sword_collision_1);
                    }
                    if (tag == "p2") {
                        instance_create(x, y, obj_sword_collision_2);
                    }
                    if (tag == "p3") {
                        instance_create(x, y, obj_sword_collision_3);
                    }
                    if (tag == "p4") {
                        instance_create(x, y, obj_sword_collision_4);
                    }
                }
                if (facing == "right") {
                    if (tag == "p1") {
                        instance_create(x+48, y, obj_sword_collision_1);
                    }
                    if (tag == "p2") {
                        instance_create(x+48, y, obj_sword_collision_2);
                    }
                    if (tag == "p3") {
                        instance_create(x+48, y, obj_sword_collision_3);
                    }
                    if (tag == "p4") {
                        instance_create(x+48, y, obj_sword_collision_4);
                    }
                }
            }
            // Play slash sound effect
            if (playSlash) {
                playSlash = false;
                audio_play_sound(snd_slash, 10, false);
            }
            attackFrame = 1;
        }
        image_index = attackFrame;
        
        // Attack over
        if (attackTimer &gt; 20) {
            attackTimer = 0;
            attack = false;
            // Remove attack collision
            if (tag == "p1") {
                with (obj_sword_collision_1) {
                    instance_destroy();
                }
            }else if (tag == "p2") {
                with (obj_sword_collision_2) {
                    instance_destroy();
                }
            }else if (tag == "p3") {
                with (obj_sword_collision_3) {
                    instance_destroy();
                }
            }else if (tag == "p4") {
                with (obj_sword_collision_4) {
                    instance_destroy();
                }
            }
        }
    }
    
    // Blocking animation
    if (block) {
        // Determine direction
        if (facing == "left") {
            sprite_index = spr_player_block_left;
        } 
        if (facing == "right") {
            sprite_index = spr_player_block_right;
        }
        blockTimer++;
        if (blockTimer &gt; 60){
            blockTimer = 0;
            block = false;
            // Block cooldown
            blockCD = 60*7;
        }
    // Block cooldown
    }else{
        if (blockCD &gt; 0) {
            blockCD -= 1;
        }
    }
    
    // Stunned
    if (stunned) {
        if (facing == "left") {
            sprite_index = spr_player_stunned_left;
        }
        if (facing == "right") {
            sprite_index = spr_player_stunned_right;
        }
        stunTimer += 1;
        if (stunTimer &gt; 90) {
            stunTimer = 0;
            stunned = false;
        }
    }
} /// end check room type


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_sword_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
damage = true;


// If the tag we are colliding with 
// is not ours, it is an enemy object
if (obj_controller.obj_dummy.tag != tag) {
    // Player 2 attacking
    if (obj_controller.obj_dummy.attack) {
        // Player 2 on attack frame
        if (obj_controller.obj_dummy.attackTimer == 15) {
            // Player 1 attacking
            if (attack) {
                // Player 1 on attack frame
                if (attackTimer &gt;= 15) {
                    // clashing of swords occurred, do some code
                    damage = false;
                    audio_play_sound(snd_clash, 10, false);
                }else{
                    // no clashing, subtract player 1 hearts and stop attack animation
                    attack = false;
                    attackTimer = 0;
                }
            }
            // Player 1 blocking
            if (block) {
                // clashing of swords occurred, do some code
                damage = false;
                audio_play_sound(snd_hit_shield, 10, false);
                // Get out of block
                block = false;
                blockTimer = 0;
                // Stun player
                obj_controller.obj_dummy.stunned = true;
            }
        
            // Apply damage
            if (damage) {
                // Tag who hit me last
                lastHitBy = obj_controller.obj_dummy.tag;
                // Knockback effect
                bmx = x+32/2;
                bmy = y+32/2;
                bmx2 = obj_controller.obj_dummy.x+32/2;
                bmy2 = obj_controller.obj_dummy.y+32/2;
                angle = arctan2(bmy - bmy2, bmx - bmx2);
                angle = angle * (180 / pi);
                if (angle &lt; 0) {
                    angle = 360 - (-angle);
                }
                distance = sqrt((bmx-bmx2) * (bmx-bmx2) + (bmy-bmy2) * (bmy-bmy2));
                vX += cos( (pi/180)*(angle) ) * 10;
                // Subtract hearts
                if (hearts &gt; 0){
                    hearts -=1;
                }
                // Play hit sound effect
                audio_play_sound(snd_hit, 10, false);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Player(s) GUI
//draw_set_colour(c_white);
//draw_text_transformed(x+32, y+32, "index: " +string(index), 2, 2, image_angle);

// Render Player Hearts


//draw_text_transformed(x, y-25, "tag: " +string(tag), 1, 1, image_angle);// Obj index
//draw_text_transformed(x+32, y+40, "object_index: " +string(object_index), 1, 1, image_angle);

//draw_text_transformed(y, 72*2, "Blocking: " +string(blockCD/60), 2, 2, image_angle);
//draw_text_transformed(y, 72*3, "Stunned: " +string(stunned), 2, 2, image_angle);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
