<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize World

// Charatcer selection room
if (room == rm_characterSelection) {
    global.player_count = 0;
    /*global.player_count = 0;
    global.player[0] = false;
    global.player[1] = false;
    global.player[2] = false;
    global.player[3] = false;*/
}


// Battle room
if (room == rm_battle) {
    /*for (var i=0; i&lt;players; i++) {
        obj_player.x = 544;
        obj_player.y = 288;
        obj_player2.x = 992;
        obj_player2.y = 288;
    }*/
    
    // Get tag of current attacker in the world.
    // This will help us differentiate
    // objects created by different players,
    // using only one object
    obj_dummy = noone;
    
    
    // Player attack collision
    //atk_id = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update rooms

// Character Selection Room
if (room == rm_characterSelection) {
    // Join Game
    for (var i=0; i&lt;4; i++) {
        // A Pressed
        if gamepad_button_check_pressed(i, gp_face1) {
            // Set Player instance[i] to alive
            with (obj_players) {
                if (index == i) {
                    if (!alive) {
                        alive = true;
                        global.player_count++;
                    }
                    
                    // Show Player joined, remove "0 with slash" text
                    with (obj_character_selection) {
                        if (index == i) {
                            sprite_index = spr_player_idle_right;
                            image_index = 0;
                        }
                    }
                    // Show Player joined, remove "Press A to join" text
                    with (obj_join) {
                        if (index == i) {
                            sprite_index = noone;
                        }
                    }
                }
            }
        }
        // B Pressed
        if gamepad_button_check_pressed(i, gp_face2) {
            // Set Player instance[i] to alive
            with (obj_players) {
                if (index == i) {
                    if (alive) {
                        alive = false;
                        global.player_count--;
                    }
                    // Show Player leave, add "0 with slash" text
                    with (obj_character_selection) {
                        if (index == i) {
                            sprite_index = spr_blank_player;
                            image_index = 0;
                        }
                    }
                    // Show Player joined, add "Press A to join" text
                    with (obj_join) {
                        if (index == i) {
                            sprite_index = spr_button_join;
                            image_index = 0;
                        }
                    }
                }
            }
        }
        // Start Pressed
        if gamepad_button_check_pressed(i, gp_start) {
            room_goto(rm_battle);
        }
    }

    // Attack
    /*if gamepad_button_check_pressed(0, gp_face1) {
        if (!attack &amp;&amp; !stunned) {
            playSlash = true;
            clash = false;
            attack = true;
            spawnAttack = true;
        }
    }*/
}


// Battle Room
if (room == rm_battle) {
    winner = false;
    
    // Player death
    with (obj_players) {
    
    /*if (alive) {
        // Player 1
        if (index == 0) {
            if (hearts &lt;= 0) {
                obj_controller.obj_dummy.wins++;
            }
        // Player 2
        }else if (index == 1) {
            if (hearts &lt;= 0) {
                obj_controller.obj_dummy.wins++;
            }
        // Player 3
        }else if (index == 2) {
            if (hearts &lt;= 0) {
                obj_controller.obj_dummy.wins++;
            }
        // Player 4
        }else if (index == 3) {
            if (hearts &lt;= 0) {
                obj_controller.obj_dummy.wins++;
            }
        }
    }*/
    
    
    
    
        if (hearts &lt;= 0) {
            /*if (lastHitBy == "p1") {
                if (tag == "p1") {
                    wins++;
                    winner = true;
                }
            }else if (lastHitBy == "p2") {
                if (tag == "p2") {
                    wins++;
                    winner = true;
                }
            }else if (lastHitBy == "p3") {
                if (tag == "p3") {
                    wins++;
                    winner = true;
                }
            }else if (lastHitBy == "p4") {
                if (tag == "p4") {
                    wins++;
                    winner = true;
                }
            }*/
            //instance_destroy();
            if (index == 0) {
                x = 128;
                y = 224;
                hearts = 3;
                wins = 0;
                blockCD = 0;
            }else if (index == 1) {
                x = 352;
                y = 544;
                hearts = 3;
                wins = 0;
                blockCD = 0;
            }else if (index == 2) {
                x = 1408;
                y = 224;
                hearts = 3;
                wins = 0;
                blockCD = 0;
            }else if (index == 3) {
                x = 1184;
                y = 544;
                hearts = 3;
                wins = 0;
                blockCD = 0;
            }
                if (lastHitBy == "p1") {
                    with (obj_players) {
                        if (tag == "p1") {
                            wins++;
                            winner = true;
                        }
                    }
                }else if (lastHitBy == "p2") {
                    with (obj_players) {
                        if (tag == "p2") {
                            wins++;
                            winner = true;
                        }
                    }
                }else if (lastHitBy == "p3") {
                    with (obj_players) {
                        if (tag == "p3") {
                            wins++;
                            winner = true;
                        }
                    }
                }else if (lastHitBy == "p4") {
                    with (obj_players) {
                        if (tag == "p4") {
                            wins++;
                            winner = true;
                        }
                    }
                }
        }
    }
    
    // Reset Game on spacebar
    if keyboard_check_pressed(vk_escape) {
        with (obj_players) {
            obj_players.hearts = 3;
            obj_players.wins = 0;
            obj_players.blockCD = 0;
            if (index == 0) {
                x = 128;
                y = 224;
                tag = "p1";
            }else if (index == 1) {
                x = 352;
                y = 544;
                tag = "p2";
            }else if (index == 2) {
                x = 1408;
                y = 224;
                tag = "p3";
            }else if (index == 3) {
                x = 1184;
                y = 544;
                tag = "p4";
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render text

// Charatcer selection room
if (room == rm_characterSelection) {    
    //draw_set_colour(c_white);
    //draw_set_halign(fa_center);
    //draw_text_transformed(room_width/2, room_height-72, "Players: " + string(players), 1, 1, image_angle);

}

// Battle room
if (room == rm_battle) {

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
