<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables


// Combat
wins = 0;
hearts = 3;
tag = "p2";
lastHitBy = "";
block = false;
blockTimer = 0;
blockCD = 0;
stunned = false;
stunTimer = 0;
spawnAttack = false;

// Gravity
grav = 0.9;
vX = 0.0;
vY = 0.0;
jumps = 1;

// Movement
moveLeft = false;
moveRight = false;
moveUp = false;
moveDown = false;
moving = false;
facing = "right";
shift = false;
playSlash = false;

jumpstate = "falling";

// Attacks
attack = false;
attackFrame = 0;
attackTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update

/* [ Why collision doesnt work sometimes ]
    When you have precise collision and you
    jump or move, the collision box changes,
    because of this, the player can cahnge collision 
    boxes in between frames and and become stuck inside 
    of a collision block upon changing frames.
*/
// Key Pressed
if keyboard_check_pressed(vk_left) || gamepad_button_check_pressed(1, gp_padl) {
    if (!stunned &amp;&amp; !block) {
        moveLeft = true;
    }
}
if keyboard_check_pressed(vk_right) || gamepad_button_check_pressed(1, gp_padr) {
    if (!stunned &amp;&amp; !block) {
        moveRight = true;
    }
}
if keyboard_check_pressed(vk_up) || gamepad_button_check_pressed(1, gp_face1) {
    if (!attack &amp;&amp; !stunned) {
        if ( jumps &gt; 0 ){
            jumps--;
            y -= 5;
            vY = -20;
            jumpstate = "jump";
        }
    }
}
if keyboard_check_pressed(vk_rcontrol) || gamepad_button_check_pressed(1, gp_face3) {
    if (!attack &amp;&amp; !stunned) {
        playSlash = true;
        clash = false;
        attack = true;
        spawnAttack = true;
    }
}
if keyboard_check_pressed(vk_down) || gamepad_button_check_pressed(1, gp_face2) {
    if (!block &amp;&amp; blockCD &lt;= 0 &amp;&amp; !stunned) {
        block = true;
    }
}
if keyboard_check_pressed(vk_shift) {
    //shift = true;   
}

// Key Released
if keyboard_check_released(vk_left) || gamepad_button_check_released(1, gp_padl) {
    moveLeft = false;
}
if keyboard_check_released(vk_right) || gamepad_button_check_released(1, gp_padr) {
    moveRight = false;
}
if keyboard_check_released(vk_shift) {
    //shift = false;   
}

// Player movement
if (moveLeft) {
    vX -= 0.5;
    if (!shift) {
        facing = "left";
    }
    moving = true;
}else if (moveRight) {
    vX += 0.5;
    if (!shift) {
        facing = "right";
    }
    moving = true;
}

// Velocity decay
if (!moveLeft &amp;&amp; !moveRight) {
    moving = false;
    vX = vX - vX * 0.2;
}

// Collision, also add velocity to Player
if !place_meeting(x + vX, y, obj_collide) { 
    x +=vX;
}

// max velocity
if (vX &lt;= -6) {
    vX = -6;
}if (vX &gt;= 6) {
    vX = 6;
}

// Gravity
vY += grav;
if (vY &gt; 15) vY = 15;

if (!place_meeting(x, y+vY, obj_collide)) {
    y +=vY;
}else{
    vY = 0.0;
    jumpstate = "ground";
    jumps = 1;
}

// Idle animation
if (!moving) {
    if (facing == "left") {
        if (jumpstate=="jump"){
            sprite_index = spr_player_jump_left;
        }else{
            sprite_index = spr_player_idle_left;
        }
    }
    if (facing == "right") {
        if (jumpstate=="jump"){
            sprite_index = spr_player_jump_right;
        }else{
            sprite_index = spr_player_idle_right;
        }
    }
// Moving animation
}else{
    if (facing == "left") {
        if (jumpstate!="jump"){
            sprite_index = spr_player_walk_left;
            image_speed = 0.1;
        }else{
            sprite_index = spr_player_jump_left;
        }
    }
    if (facing == "right") {
        if (jumpstate!="jump"){
            sprite_index = spr_player_walk_right;
            image_speed = 0.1;
        }else{
            sprite_index = spr_player_jump_right;
        }
    }
}

// Attack animation
if (attack) {
    // Determine direction
    if (facing == "left") {
       sprite_index = spr_player_attack_left;
    } 
    if (facing == "right") {
       sprite_index = spr_player_attack_right;
    }
    
    // Attack timer
    attackTimer++;
    if (attackTimer &lt; 15) {
        attackFrame = 0;
    }else{
        // Spawn attack collision
        if (spawnAttack) {
            spawnAttack = false;
            // Set object tag
            obj_controller.obj_dummy = self;
            if (facing == "left") {
                instance_create(x, y, obj_sword_collision);
            }
            if (facing == "right") {
                instance_create(x+48, y, obj_sword_collision);
            }
        }
        // Play slash sound effect
        if (playSlash) {
            playSlash = false;
            audio_play_sound(snd_slash, 10, false);
        }
        attackFrame = 1;
    }
    image_index = attackFrame;
    
    if (attackTimer &gt; 20) {
        attackTimer = 0;
        attack = false;
        // Remove attack collision
        with (obj_sword_collision) {
            if (obj_sword_collision.tag == tag) {
           //     instance_destroy();
            }
        }
    }
}

// Blocking animation
if (block) {
    // Determine direction
    if (facing == "left") {
        sprite_index = spr_player_block_left;
    } 
    if (facing == "right") {
        sprite_index = spr_player_block_right;
    }
    blockTimer++;
    if (blockTimer &gt; 60){
        blockTimer = 0;
        block = false;
        // Block cooldown
        blockCD = 60*7;
    }
// Block cooldown
}else{
    if (blockCD &gt; 0) {
        blockCD -= 1;
    }
}

// Stunned
if (stunned) {
    if (facing == "left") {
        sprite_index = spr_player_stunned_left;
    }
    if (facing == "right") {
        sprite_index = spr_player_stunned_right;
    }
    stunTimer += 1;
    if (stunTimer &gt; 90) {
        stunTimer = 0;
        stunned = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_sword_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
damage = true;


// If the tag we are colliding with 
// is not ours, it is an enemy object
if (obj_controller.obj_dummy.tag != tag) {
    // Player 2 attacking
   /* if (obj_controller.obj_dummy.attack) {
        // Player 2 on attack frame
        if (obj_controller.obj_dummy.attackTimer == 15) {
            // Player 1 attacking
            if (attack) {
                // Player 1 on attack frame
                if (attackTimer &gt;= 15) {
                    // clashing of swords occurred, do some code
                    damage = false;
                    audio_play_sound(snd_hit2, 10, false);
                }else{
                    // no clashing, subtract player 1 hearts and stop attack animation
                    attack = false;
                    attackTimer = 0;
                }
            }
            // Player 1 blocking
            if (block) {
                // clashing of swords occurred, do some code
                damage = false;
                audio_play_sound(snd_hit_shield, 10, false);
                // Get out of block
                block = false;
                blockTimer = 0;
                // Stun player
                obj_controller.obj_dummy.stunned = true;
            }
        
            // Apply damage
            if (damage) {
                // Tag who hit me last
                lastHitBy = obj_controller.obj_dummy.tag;
                // Knockback effect
                bmx = x+32/2;
                bmy = y+32/2;
                bmx2 = obj_controller.obj_dummy.x+32/2;
                bmy2 = obj_controller.obj_dummy.y+32/2;
                angle = arctan2(bmy - bmy2, bmx - bmx2);
                angle = angle * (180 / pi);
                if (angle &lt; 0) {
                    angle = 360 - (-angle);
                }
                distance = sqrt((bmx-bmx2) * (bmx-bmx2) + (bmy-bmy2) * (bmy-bmy2));
                vX += cos( (pi/180)*(angle) ) * 10;
                // Subtract hearts
                if (hearts &gt; 0){
                    hearts -=1;
                }
                // Play hit sound effect
                audio_play_sound(snd_hit, 10, false);
            }
        }
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>obj_controller.obj_dummy.tag</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>tag</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>obj_controller.obj_dummy.attack</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>obj_controller.obj_dummy.attackTimer</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>15</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>532</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_effect</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>8</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>24</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>24</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>13</kind>
            <string>255</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instance_create(x,y,obj_bullet);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text_transformed(room_width - 72*2, 72, "Wins: " +string(wins), 2, 2, image_angle);
draw_text_transformed(room_width - 72*2, 72*2, "Blocking: " +string(blockCD/60), 2, 2, image_angle);
draw_text_transformed(room_width - 72*2, 72*3, "Stunned: " +string(stunned), 2, 2, image_angle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
